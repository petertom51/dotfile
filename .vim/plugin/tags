!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
AddTabularPattern	Tabular.vim	/^function! AddTabularPattern(command, force)$/;"	f
AddTabularPipeline	Tabular.vim	/^function! AddTabularPipeline(command, force)$/;"	f
AnotherLongCommandLinePatchForWindows	cppcomplete.vim	/^function! s:AnotherLongCommandLinePatchForWindows()$/;"	f
AppendFromCheckpath	cppcomplete.vim	/^function! s:AppendFromCheckpath()$/;"	f
BackwardsSnippet	snipMate.vim	/^fun! BackwardsSnippet()$/;"	f
Bettergd	cppcomplete.vim	/^function! s:Bettergd()$/;"	f
BinarySplit	cppcomplete.vim	/^function! s:BinarySplit(startLine, endLine, wordLength, wordToLookup)$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.activate(...)$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.open(...)$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark	NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
Bookmark	NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
BrowseNFiles	cppcomplete.vim	/^function! s:BrowseNFiles()$/;"	f
BuildBlock	cppcomplete.vim	/^function! s:BuildBlock(regex)$/;"	f
BuildBlockFromRegexp	cppcomplete.vim	/^function! s:BuildBlockFromRegexp()$/;"	f
BuildFromOrdinary	cppcomplete.vim	/^function! s:BuildFromOrdinary()$/;"	f
BuildHashTable	cppcomplete.vim	/^function! s:BuildHashTable()$/;"	f
BuildIt	cppcomplete.vim	/^function! s:BuildIt()$/;"	f
BuildMenu	cppcomplete.vim	/^function! s:BuildMenu()$/;"	f
BuildMenuFromBlock	cppcomplete.vim	/^function! s:BuildMenuFromBlock()$/;"	f
BuildSinglePass	cppcomplete.vim	/^function! s:BuildSinglePass()$/;"	f
CSBuild	cscope_maps.vim	/^function CSBuild()$/;"	f
CSCOPE_DB	cscope_maps.vim	/^            let s:CSCOPE_DB = getcwd() . "\/cscope.out"$/;"	v
CSCOPE_DB	cscope_maps.vim	/^    let s:CSCOPE_DB = getcwd()$/;"	v
CSCOPE_DB_EXIST	cscope_maps.vim	/^            let s:CSCOPE_DB_EXIST = 1$/;"	v
CURDIR	cscope_maps.vim	/^    let s:CURDIR = getcwd()$/;"	v
CheckClassType	cppcomplete.vim	/^function! s:CheckClassType()$/;"	f
CheckFiletype	cppcomplete.vim	/^function! s:CheckFiletype()$/;"	f
CheckForTagFile	cppcomplete.vim	/^function! s:CheckForTagFile()$/;"	f
CheckHiddenLoaded	cppcomplete.vim	/^function! s:CheckHiddenLoaded()$/;"	f
ChooseCommandMap	Tabular.vim	/^function! s:ChooseCommandMap(commandline)$/;"	f
ChooseSnippet	snipMate.vim	/^fun s:ChooseSnippet(scope, trigger)$/;"	f
ClearFromTags	cppcomplete.vim	/^function! s:ClearFromTags()$/;"	f
CompleteTabularizeCommand	Tabular.vim	/^function! s:CompleteTabularizeCommand(argstart, cmdline, cursorpos)$/;"	f
CsGenDB	cscope_maps.vim	/^function CsGenDB()$/;"	f
CsGetDBpath	cscope_maps.vim	/^function CsGetDBpath()$/;"	f
CurrentHit	cppcomplete.vim	/^function! s:CurrentHit()$/;"	f
DefineSnips	snipMate.vim	/^fun s:DefineSnips(dir, aliasft, realft)$/;"	f
DelHit	cppcomplete.vim	/^function! s:DelHit()$/;"	f
DoGlobalJump	cppcomplete.vim	/^function! s:DoGlobalJump()$/;"	f
DoMenu	cppcomplete.vim	/^function! s:DoMenu()$/;"	f
DoTagLikeJump	cppcomplete.vim	/^function! s:DoTagLikeJump(tagLine)$/;"	f
EchoBlock	cppcomplete.vim	/^function! s:EchoBlock()$/;"	f
Error	gtags-cscope.vim	/^function! s:Error(msg)$/;"	f
Error	gtags.vim	/^function! s:Error(msg)$/;"	f
ExecLoad	gtags.vim	/^function! s:ExecLoad(option, long_option, pattern)$/;"	f
Extract	gtags.vim	/^function! s:Extract(line, target)$/;"	f
ExtractSnips	snipMate.vim	/^fun! ExtractSnips(dir, ft)$/;"	f
ExtractSnipsFile	snipMate.vim	/^fun! ExtractSnipsFile(file, ft)$/;"	f
GenerateAndAppend	cppcomplete.vim	/^function! s:GenerateAndAppend()$/;"	f
GenerateFromCheckpath	cppcomplete.vim	/^function! s:GenerateFromCheckpath()$/;"	f
GenerateTags	cppcomplete.vim	/^function! s:GenerateTags()$/;"	f
GetClassSep	cppcomplete.vim	/^function! s:GetClassSep()$/;"	f
GetClassType	cppcomplete.vim	/^function! s:GetClassType()$/;"	f
GetIncludeFiles	cppcomplete.vim	/^function! s:GetIncludeFiles()$/;"	f
GetMacro	cppcomplete.vim	/^function! s:GetMacro(foundIt)$/;"	f
GetParents	cppcomplete.vim	/^function! s:GetParents()$/;"	f
GetPieces	cppcomplete.vim	/^function! s:GetPieces()$/;"	f
GetSnippet	snipMate.vim	/^fun s:GetSnippet(word, scope)$/;"	f
GetSnippets	snipMate.vim	/^fun! GetSnippets(dir, filetypes)$/;"	f
GetType	cppcomplete.vim	/^function! s:GetType()$/;"	f
GetTypedef	cppcomplete.vim	/^function! s:GetTypedef(foundIt)$/;"	f
GetUserTyped	cppcomplete.vim	/^function! s:GetUserTyped()$/;"	f
Gozilla	gtags.vim	/^function! s:Gozilla()$/;"	f
GtagsAutoUpdate	gtags.vim	/^function! s:GtagsAutoUpdate()$/;"	f
GtagsCandidate	gtags.vim	/^function! GtagsCandidate(lead, line, pos)$/;"	f
GtagsCandidateCore	gtags.vim	/^function! GtagsCandidateCore(lead, line, pos)$/;"	f
GtagsCscope	gtags-cscope.vim	/^function! s:GtagsCscope()$/;"	f
GtagsCscope_Absolute_Path	gtags-cscope.vim	/^    let GtagsCscope_Absolute_Path = 0$/;"	v
GtagsCscope_Auto_Load	gtags-cscope.vim	/^    let GtagsCscope_Auto_Load = 0$/;"	v
GtagsCscope_Auto_Map	gtags-cscope.vim	/^    let GtagsCscope_Auto_Map = 0$/;"	v
GtagsCscope_GtagsRoot	gtags-cscope.vim	/^function! s:GtagsCscope_GtagsRoot()$/;"	f
GtagsCscope_Ignore_Case	gtags-cscope.vim	/^    let GtagsCscope_Ignore_Case = 0$/;"	v
GtagsCscope_Keep_Alive	gtags-cscope.vim	/^    let GtagsCscope_Keep_Alive = 0$/;"	v
GtagsCscope_Quiet	gtags-cscope.vim	/^    let GtagsCscope_Quiet = 0$/;"	v
GtagsCscope_Use_Old_Key_Map	gtags-cscope.vim	/^    let GtagsCscope_Use_Old_Key_Map = 0$/;"	v
GtagsCursor	gtags.vim	/^function! s:GtagsCursor()$/;"	f
Gtags_Auto_Map	gtags.vim	/^    let g:Gtags_Auto_Map = 0$/;"	v
Gtags_Auto_Update	gtags.vim	/^    let g:Gtags_Auto_Update = 0$/;"	v
Gtags_Double_Quote_Char	gtags.vim	/^        let g:Gtags_Double_Quote_Char = '"'$/;"	v
Gtags_Double_Quote_Char	gtags.vim	/^        let g:Gtags_Double_Quote_Char = '\\"'$/;"	v
Gtags_Efm	gtags.vim	/^    let g:Gtags_Efm = "%f\\t%l\\t%m"$/;"	v
Gtags_Efm	gtags.vim	/^    let g:Gtags_Efm = "%m\\t%f\\t%l"$/;"	v
Gtags_No_Auto_Jump	gtags.vim	/^	let g:Gtags_No_Auto_Jump = 0$/;"	v
Gtags_No_Auto_Jump	gtags.vim	/^	let g:Gtags_No_Auto_Jump = g:Dont_Jump_Automatically$/;"	v
Gtags_OpenQuickfixWindow	gtags.vim	/^    let g:Gtags_OpenQuickfixWindow = 1$/;"	v
Gtags_Result	gtags.vim	/^    let g:Gtags_Result = "ctags"$/;"	v
Gtags_Result	gtags.vim	/^    let g:Gtags_Result = "ctags-mod"$/;"	v
Gtags_Shell_Quote_Char	gtags.vim	/^        let g:Gtags_Shell_Quote_Char = "'"$/;"	v
Gtags_Shell_Quote_Char	gtags.vim	/^        let g:Gtags_Shell_Quote_Char = '"'$/;"	v
Gtags_Single_Quote_Char	gtags.vim	/^        let g:Gtags_Single_Quote_Char = "'"$/;"	v
Gtags_Single_Quote_Char	gtags.vim	/^        let g:Gtags_Single_Quote_Char = s:sq . s:dq . s:sq . s:dq . s:sq$/;"	v
Gtags_VerticalWindow	gtags.vim	/^    let g:Gtags_VerticalWindow = 0$/;"	v
HasNotAsked	cppcomplete.vim	/^function! s:HasNotAsked()$/;"	f
InComment	cppcomplete.vim	/^function! s:InComment(lineT2, colT2)$/;"	f
InsHit	cppcomplete.vim	/^function! s:InsHit()$/;"	f
InsNextHit	cppcomplete.vim	/^function! s:InsNextHit()$/;"	f
InsPrevHit	cppcomplete.vim	/^function! s:InsPrevHit()$/;"	f
InsertToTags	cppcomplete.vim	/^function! s:InsertToTags()$/;"	f
IsHitted	cppcomplete.vim	/^function! s:IsHitted()	$/;"	f
IsLocal	cppcomplete.vim	/^function! s:IsLocal(l)$/;"	f
IsTypedefStruct	cppcomplete.vim	/^function! s:IsTypedefStruct(wordCheck)$/;"	f
JumpToDecl	cppcomplete.vim	/^function! s:JumpToDecl(jumpAllowed)$/;"	f
JumpToInterestingLine	cppcomplete.vim	/^function! s:JumpToInterestingLine(lines, i)$/;"	f
JumpToLineInBlock	cppcomplete.vim	/^function! s:JumpToLineInBlock(n)$/;"	f
KeyMap	NERD_tree.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
KeyMap	NERD_tree.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap	NERD_tree.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap	NERD_tree.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap	NERD_tree.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
KeyMap	NERD_tree.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
KeyMap	NERD_tree.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
KeyMap	NERD_tree.vim	/^function! s:KeyMap.bind()$/;"	f
KeyMap	NERD_tree.vim	/^function! s:KeyMap.invoke(...)$/;"	f
KeyMap	NERD_tree.vim	/^let s:KeyMap = {}$/;"	v
KeyMap_Invoke	NERD_tree.vim	/^function! s:KeyMap_Invoke(key)$/;"	f
MakeSnip	snipMate.vim	/^fun! MakeSnip(scope, trigger, content, ...)$/;"	f
MenuController	NERD_tree.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController	NERD_tree.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController	NERD_tree.vim	/^function! s:MenuController._current()$/;"	f
MenuController	NERD_tree.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController	NERD_tree.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController	NERD_tree.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController	NERD_tree.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController	NERD_tree.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController	NERD_tree.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController	NERD_tree.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController	NERD_tree.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController	NERD_tree.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuController	NERD_tree.vim	/^let s:MenuController = {}$/;"	v
MenuItem	NERD_tree.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem	NERD_tree.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem	NERD_tree.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem	NERD_tree.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem	NERD_tree.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem	NERD_tree.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem	NERD_tree.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem	NERD_tree.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem	NERD_tree.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
MenuItem	NERD_tree.vim	/^let s:MenuItem = {}$/;"	v
NERDTree	NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTreeAddKeyMap	NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddSubmenu	NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeBookmark	NERD_tree.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
NERDTreeBufName	NERD_tree.vim	/^    let t:NERDTreeBufName = bufferName$/;"	v
NERDTreeBufName	NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
NERDTreeDirNode	NERD_tree.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
NERDTreeFileNode	NERD_tree.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
NERDTreeFocus	NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeHijackNetrw	NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeIgnore	NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
NERDTreePath	NERD_tree.vim	/^let g:NERDTreePath = s:Path$/;"	v
NERDTreeRender	NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeSortOrder	NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
NERDTreeSortStarIndex	NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
NERDTreeStatusline	NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}"$/;"	v
NERD_tree_version	NERD_tree.vim	/^let s:NERD_tree_version = '4.2.0'$/;"	v
NannyCheck	cppcomplete.vim	/^function! s:NannyCheck()$/;"	f
NextInBlock	cppcomplete.vim	/^function! s:NextInBlock()$/;"	f
Opener	NERD_tree.vim	/^function! s:Opener.New(path, opts)$/;"	f
Opener	NERD_tree.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
Opener	NERD_tree.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
Opener	NERD_tree.vim	/^function! s:Opener._newSplit()$/;"	f
Opener	NERD_tree.vim	/^function! s:Opener._newVSplit()$/;"	f
Opener	NERD_tree.vim	/^function! s:Opener._openDirectory(node)$/;"	f
Opener	NERD_tree.vim	/^function! s:Opener._openFile()$/;"	f
Opener	NERD_tree.vim	/^function! s:Opener._previousWindow()$/;"	f
Opener	NERD_tree.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
Opener	NERD_tree.vim	/^function! s:Opener._reuseWindow()$/;"	f
Opener	NERD_tree.vim	/^function! s:Opener._saveCursorPos()$/;"	f
Opener	NERD_tree.vim	/^function! s:Opener.open(target)$/;"	f
Opener	NERD_tree.vim	/^let s:Opener = {}$/;"	v
ParsePattern	Tabular.vim	/^function! s:ParsePattern(string)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.Resolve(path)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.Slash()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path	NERD_tree.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
Path	NERD_tree.vim	/^function! s:Path._str()$/;"	f
Path	NERD_tree.vim	/^function! s:Path._strForCd()$/;"	f
Path	NERD_tree.vim	/^function! s:Path._strForEdit()$/;"	f
Path	NERD_tree.vim	/^function! s:Path._strForGlob()$/;"	f
Path	NERD_tree.vim	/^function! s:Path._strForUI()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.displayString()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.edit()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.isUnder(path)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.str(...)$/;"	f
Path	NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
Path	NERD_tree.vim	/^function! s:Path.tabnr()$/;"	f
Path	NERD_tree.vim	/^let s:Path = {}$/;"	v
PreCl	cppcomplete.vim	/^function! s:PreCl()$/;"	f
PrevInBlock	cppcomplete.vim	/^function! s:PrevInBlock()$/;"	f
PreviewEntry	cppcomplete.vim	/^function! s:PreviewEntry(entry)$/;"	f
ProcessFile	snipMate.vim	/^fun s:ProcessFile(file, ft, ...)$/;"	f
RangeOf	cppcomplete.vim	/^function! s:RangeOf(c)$/;"	f
RefreshMenu	cppcomplete.vim	/^function! s:RefreshMenu()	$/;"	f
RemoveTyped	cppcomplete.vim	/^function! s:RemoveTyped()$/;"	f
ResetSnippets	snipMate.vim	/^fun! ResetSnippets()$/;"	f
RunGlobal	gtags.vim	/^function! s:RunGlobal(line)$/;"	f
SID	NERD_tree.vim	/^function s:SID()$/;"	f
SetGrepArg	cppcomplete.vim	/^function! s:SetGrepArg(argtxt)$/;"	f
SetLanguage	cppcomplete.vim	/^function! s:SetLanguage()$/;"	f
SetMatchesFromBuffer	cppcomplete.vim	/^function! s:SetMatchesFromBuffer(grepArg)$/;"	f
SetMaxHits	cppcomplete.vim	/^function! s:SetMaxHits()$/;"	f
SetStandardPopup	cppcomplete.vim	/^function! s:SetStandardPopup()$/;"	f
ShowAvailableSnips	snipMate.vim	/^fun! ShowAvailableSnips()$/;"	f
ShowCurrentSettings	cppcomplete.vim	/^function! s:ShowCurrentSettings()$/;"	f
SimpleScopeGuess	cppcomplete.vim	/^function! s:SimpleScopeGuess()$/;"	f
SplitCommands	Tabular.vim	/^function! s:SplitCommands(string)$/;"	f
TabularCommands	Tabular.vim	/^let s:TabularCommands = {}$/;"	v
Tabularize	Tabular.vim	/^function! Tabularize(command) range$/;"	f
TagListAutoCmds	taglist.vim	/^    augroup TagListAutoCmds$/;"	a
TagListMenuCmds	taglist.vim	/^    augroup TagListMenuCmds$/;"	a
TagList_IsValid	taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	taglist.vim	/^function! TagList_Start()$/;"	f
TagList_WrapUp	taglist.vim	/^function! TagList_WrapUp()$/;"	f
TagList_title	taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
Tlist_Add_Files	taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tag_Scope	taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Extract_Tagtype	taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_FileType_Init	taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Tag_Linenum	taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tagname_By_Line	taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Post_Close_Cleanup	taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_File_Always	taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Process_Filelist	taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Refresh	taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Skip_Refresh	taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
Tlist_Sort_Type	taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_Use_Horiz_Window	taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_User_Removed_File	taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Vim_Session_Load	taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_WinHeight	taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_Window_Check_Auto_Open	taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Help_Text	taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
ToggleAccess	cppcomplete.vim	/^function! s:ToggleAccess()$/;"	f
ToggleClassMembers	cppcomplete.vim	/^function! s:ToggleClassMembers()$/;"	f
ToggleClassTags	cppcomplete.vim	/^function! s:ToggleClassTags()$/;"	f
ToggleFastGrep	cppcomplete.vim	/^function! s:ToggleFastGrep()$/;"	f
ToggleGlobalVars	cppcomplete.vim	/^function! s:ToggleGlobalVars()$/;"	f
ToggleInheritance	cppcomplete.vim	/^function! s:ToggleInheritance()$/;"	f
ToggleMacros	cppcomplete.vim	/^function! s:ToggleMacros()$/;"	f
ToggleNanny	cppcomplete.vim	/^function! s:ToggleNanny()$/;"	f
TogglePreview	cppcomplete.vim	/^function! s:TogglePreview()$/;"	f
ToggleRelaxed	cppcomplete.vim	/^function! s:ToggleRelaxed()$/;"	f
ToggleShowAccess	cppcomplete.vim	/^function! s:ToggleShowAccess()$/;"	f
ToggleTDefs	cppcomplete.vim	/^function! s:ToggleTDefs()$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.open(...)$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.reveal(path)$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
TreeDirNode	NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeDirNode	NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.open(...)$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode	NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TreeFileNode	NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
TriggerSnippet	snipMate.vim	/^fun! TriggerSnippet()$/;"	f
TrimOption	gtags.vim	/^function! s:TrimOption(option)$/;"	f
UpdateInheritList	cppcomplete.vim	/^function! s:UpdateInheritList()$/;"	f
UpdatehiddenBuffer	cppcomplete.vim	/^function! s:UpdatehiddenBuffer()$/;"	f
accessCheck	cppcomplete.vim	/^let s:accessCheck=0$/;"	v
activateAll	NERD_tree.vim	/^function! s:activateAll()$/;"	f
activateBookmark	NERD_tree.vim	/^function! s:activateBookmark(bm)$/;"	f
activateDirNode	NERD_tree.vim	/^function! s:activateDirNode(node)$/;"	f
activateFileNode	NERD_tree.vim	/^function! s:activateFileNode(node)$/;"	f
bindMappings	NERD_tree.vim	/^function! s:bindMappings()$/;"	f
bookmarkNode	NERD_tree.vim	/^function! s:bookmarkNode(...)$/;"	f
bufAge	cppcomplete.vim	/^let s:bufAge=0$/;"	v
bufInWindows	NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
bufName	NERD_tree.vim	/^        let bufName = treeBufNames[i]$/;"	v
bufferName	NERD_tree.vim	/^        let bufferName = options[sort(keys(options))[choice-1]]$/;"	v
bufferName	NERD_tree.vim	/^        let bufferName = values(options)[0]$/;"	v
bufferName	NERD_tree.vim	/^    let bufferName = ''$/;"	v
centerView	NERD_tree.vim	/^function! s:centerView()$/;"	f
chCwd	NERD_tree.vim	/^function! s:chCwd(node)$/;"	f
chRoot	NERD_tree.vim	/^function! s:chRoot(node)$/;"	f
char	NERD_tree.vim	/^            let char = strpart(startToCur, strlen(startToCur)-1, 1)$/;"	v
checkForBrowse	NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
childNodesToDraw	NERD_tree.vim	/^        let childNodesToDraw = self.getVisibleChildren()$/;"	v
choice	NERD_tree.vim	/^        let choice = inputlist(choices)$/;"	v
choices	NERD_tree.vim	/^        let choices = ["Choose a tree to mirror"]$/;"	v
choices	NERD_tree.vim	/^        let choices = extend(choices, sort(keys(options)))$/;"	v
clearBookmarks	NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
closeChildren	NERD_tree.vim	/^function! s:closeChildren(node)$/;"	f
closeCurrentDir	NERD_tree.vim	/^function! s:closeCurrentDir(node)$/;"	f
closeTree	NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
cmd	Tabular.vim	/^    let cmd .= ")"$/;"	v
colonNoInherit	cppcomplete.vim	/^let s:colonNoInherit=0$/;"	v
commandmap	Tabular.vim	/^    let commandmap[name] = cmd$/;"	v
compareBookmarks	NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
completeBookmarks	NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
completeOrdinary	cppcomplete.vim	/^let s:completeOrdinary=1$/;"	v
cpo	NERD_tree.vim	/^let &cpo = s:old_cpo$/;"	v
cpo	Tabular.vim	/^let &cpo = s:savecpo$/;"	v
cpo	taglist.vim	/^            let &cpo = s:cpo_save$/;"	v
cpo	taglist.vim	/^        let &cpo = s:cpo_save$/;"	v
cpo	taglist.vim	/^    let &cpo = s:cpo_save$/;"	v
cpo	taglist.vim	/^let &cpo = s:cpo_save$/;"	v
cpo_save	taglist.vim	/^let s:cpo_save = &cpo$/;"	v
createDefaultBindings	NERD_tree.vim	/^function! s:createDefaultBindings()$/;"	f
createTreeWin	NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
ctagsTemp	cppcomplete.vim	/^	let s:ctagsTemp=tempname()$/;"	v
currLanguage	cppcomplete.vim	/^let s:currLanguage="C\/C++"$/;"	v
cutBack	cppcomplete.vim	/^	let s:cutBack=''$/;"	v
cutBack	cppcomplete.vim	/^	let s:cutBack='\\@>'$/;"	v
deleteBookmark	NERD_tree.vim	/^function! s:deleteBookmark(bm)$/;"	f
deprecated	NERD_tree.vim	/^function! s:deprecated(func, ...)$/;"	f
did_ft	snipMate.vim	/^let g:did_ft = {}$/;"	v
displayHelp	NERD_tree.vim	/^function! s:displayHelp()$/;"	f
dq	gtags.vim	/^        let s:dq = '"'$/;"	v
dumpHelp	NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
echo	NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echoError	NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
escape_chars	NERD_tree.vim	/^    let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>[]"$/;"	v
escape_chars	NERD_tree.vim	/^    let s:escape_chars =  " `\\|\\"#%&,?()\\*^<>"$/;"	v
exec	NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
findAndRevealPath	NERD_tree.vim	/^function! s:findAndRevealPath()$/;"	f
firstUsableWindow	NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
getPath	NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getTreeWinNum	NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
global_command	gtags-cscope.vim	/^        let s:global_command = "global"$/;"	v
global_command	gtags-cscope.vim	/^let s:global_command = $GTAGSGLOBAL$/;"	v
global_command	gtags.vim	/^        let s:global_command = "global"$/;"	v
global_command	gtags.vim	/^let s:global_command = $GTAGSGLOBAL$/;"	v
grepPrg	cppcomplete.vim	/^let s:grepPrg="grep"$/;"	v
grepTemp	cppcomplete.vim	/^	let s:grepTemp=tempname()$/;"	v
groupS	cppcomplete.vim	/^	let s:groupS='\\%('$/;"	v
groupS	cppcomplete.vim	/^	let s:groupS='\\('$/;"	v
h	NERD_tree.vim	/^        let @h="\\" Press ". g:NERDTreeMapHelp ." for help\\n"$/;"	v
h	NERD_tree.vim	/^        let @h=@h."\\"    the NERDTree window\\n"$/;"	v
h	NERD_tree.vim	/^        let @h=@h."\\" ". g:NERDTreeMapHelp .": toggle help\\n"$/;"	v
h	NERD_tree.vim	/^        let @h=@h."\\" ". g:NERDTreeMapQuit .": Close the NERDTree window\\n"$/;"	v
h	NERD_tree.vim	/^        let @h=@h."\\" ". g:NERDTreeMapToggleZoom .": Zoom (maximize-minimize)\\n"$/;"	v
h	NERD_tree.vim	/^        let @h=@h."\\" :Bookmark <name>\\n"$/;"	v
h	NERD_tree.vim	/^        let @h=@h."\\" :BookmarkToRoot <name>\\n"$/;"	v
h	NERD_tree.vim	/^        let @h=@h."\\" :ClearAllBookmarks\\n"$/;"	v
h	NERD_tree.vim	/^        let @h=@h."\\" :ClearBookmarks [<names>]\\n"$/;"	v
h	NERD_tree.vim	/^        let @h=@h."\\" :OpenBookmark <name>\\n"$/;"	v
h	NERD_tree.vim	/^        let @h=@h."\\" :RevealBookmark <name>\\n"$/;"	v
h	NERD_tree.vim	/^        let @h=@h."\\" Bookmark commands~\\n"$/;"	v
h	NERD_tree.vim	/^        let @h=@h."\\" Other mappings~\\n"$/;"	v
h	NERD_tree.vim	/^        let @h=@h."\\"\\n\\" ----------------------------\\n"$/;"	v
h	NERD_tree.vim	/^    let @h = old_h$/;"	v
handleLeftClick	NERD_tree.vim	/^function! s:handleLeftClick()$/;"	f
handleMiddleMouse	NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
has_opt	NERD_tree.vim	/^function! s:has_opt(options, name)$/;"	f
hitList	cppcomplete.vim	/^let s:hitList=""$/;"	v
i	NERD_tree.vim	/^        let i = i + 1$/;"	v
i	NERD_tree.vim	/^    let i = 0$/;"	v
indentLevelFor	NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
initNerdTree	NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initVariable	NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
isTreeOpen	NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
jumpToChild	NERD_tree.vim	/^function! s:jumpToChild(currentNode, direction)$/;"	f
jumpToFirstChild	NERD_tree.vim	/^function! s:jumpToFirstChild(node)$/;"	f
jumpToLastChild	NERD_tree.vim	/^function! s:jumpToLastChild(node)$/;"	f
jumpToNextSibling	NERD_tree.vim	/^function! s:jumpToNextSibling(node)$/;"	f
jumpToParent	NERD_tree.vim	/^function! s:jumpToParent(node)$/;"	f
jumpToPrevSibling	NERD_tree.vim	/^function! s:jumpToPrevSibling(node)$/;"	f
jumpToRoot	NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	NERD_tree.vim	/^function! s:jumpToSibling(currentNode, forward)$/;"	f
lastHit	cppcomplete.vim	/^let s:lastHit=0$/;"	v
lastIndx	NERD_tree.vim	/^            let lastIndx = len(childNodesToDraw)-1$/;"	v
line	NERD_tree.vim	/^        let line = treeParts . self.displayString()$/;"	v
listAge	cppcomplete.vim	/^let s:listAge=0$/;"	v
loaded_gtags	gtags.vim	/^let loaded_gtags = 1$/;"	v
loaded_gtags_cscope	gtags-cscope.vim	/^let loaded_gtags_cscope = 1$/;"	v
loaded_nerd_tree	NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_snips	snipMate.vim	/^let loaded_snips = 1$/;"	v
loaded_taglist	taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	taglist.vim	/^let loaded_taglist = 'available'$/;"	v
maxDepth	cppcomplete.vim	/^let s:maxDepth=3$/;"	v
maxGrepHits	cppcomplete.vim	/^let s:maxGrepHits=9999$/;"	v
maxNMenuLines	cppcomplete.vim	/^let s:maxNMenuLines=35$/;"	v
menu_char_prefix	taglist.vim	/^let s:menu_char_prefix =$/;"	v
nannyAsked	cppcomplete.vim	/^let s:nannyAsked="\\n"$/;"	v
nannyMode	cppcomplete.vim	/^let s:nannyMode=1$/;"	v
neverUseGrep	cppcomplete.vim	/^let s:neverUseGrep= has("win32") || has("win16") || has("dos16") || has("dos32") $/;"	v
nextBufferName	NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
next_buffer_number	NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
num	snipMate.vim	/^	let num = inputlist(snippet) - 1$/;"	v
old_cpo	NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
openBookmark	NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openExplorer	NERD_tree.vim	/^function! s:openExplorer(node)$/;"	f
openHSplit	NERD_tree.vim	/^function! s:openHSplit(target)$/;"	f
openInNewTab	NERD_tree.vim	/^function! s:openInNewTab(target)$/;"	f
openInNewTabSilent	NERD_tree.vim	/^function! s:openInNewTabSilent(target)$/;"	f
openNodeRecursively	NERD_tree.vim	/^function! s:openNodeRecursively(node)$/;"	f
openVSplit	NERD_tree.vim	/^function! s:openVSplit(target)$/;"	f
options	NERD_tree.vim	/^        let options[i+1 . '. ' . treeRoot.path.str() . '  (buf name: ' . bufName . ')'] = bufName$/;"	v
options	NERD_tree.vim	/^    let options = {}$/;"	v
output	NERD_tree.vim	/^                    let output = output . i._renderToString(a:depth + 1, 1, add(copy(a:vertMap), 1), 0)$/;"	v
output	NERD_tree.vim	/^            let output = output . childNodesToDraw[lastIndx]._renderToString(a:depth + 1, 1, add(copy(a:vertMap), 0), 1)$/;"	v
output	NERD_tree.vim	/^        let output = output . line . "\\n"$/;"	v
postSourceActions	NERD_tree.vim	/^function! s:postSourceActions()$/;"	f
previewNodeCurrent	NERD_tree.vim	/^function! s:previewNodeCurrent(node)$/;"	f
previewNodeHSplit	NERD_tree.vim	/^function! s:previewNodeHSplit(node)$/;"	f
previewNodeVSplit	NERD_tree.vim	/^function! s:previewNodeVSplit(node)$/;"	f
promptToDelBuffer	NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
putCursorInTreeWin	NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
refreshCurrent	NERD_tree.vim	/^function! s:refreshCurrent(node)$/;"	f
refreshRoot	NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
regexBlock	cppcomplete.vim	/^let s:regexBlock=""$/;"	v
relaxedParents	cppcomplete.vim	/^let s:relaxedParents=1$/;"	v
renderBookmarks	NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
restoreScreenState	NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
revealBookmark	NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
running_windows	NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
saveScreenState	NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
savecpo	Tabular.vim	/^let s:savecpo = &cpo$/;"	v
searchClassMembers	cppcomplete.vim	/^let s:searchClassMembers=1$/;"	v
searchClassTags	cppcomplete.vim	/^let s:searchClassTags=1$/;"	v
searchGlobalVars	cppcomplete.vim	/^let s:searchGlobalVars=1$/;"	v
searchMacros	cppcomplete.vim	/^let s:searchMacros=0$/;"	v
searchTDefs	cppcomplete.vim	/^let s:searchTDefs=1$/;"	v
self	NERD_tree.vim	/^        let self.cachedDisplayString .=  ' -> ' . self.symLinkDest$/;"	v
self	NERD_tree.vim	/^        let self.cachedDisplayString .=  ' [RO]'$/;"	v
self	NERD_tree.vim	/^        let self.cachedDisplayString .= ' {' . join(self._bookmarkNames) . '}'$/;"	v
self	NERD_tree.vim	/^        let self.children = newChildNodes$/;"	v
setCommonBufOptions	NERD_tree.vim	/^function! s:setCommonBufOptions()$/;"	f
setupStatusline	NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
showAccess	cppcomplete.vim	/^let s:showAccess=0$/;"	v
showMenu	NERD_tree.vim	/^function! s:showMenu(node)$/;"	f
showPreview	cppcomplete.vim	/^let s:showPreview=0$/;"	v
snippets	snipMate.vim	/^let s:snippets = {} | let s:multi_snips = {}$/;"	v
snippets_dir	snipMate.vim	/^	let snippets_dir = substitute(globpath(&rtp, 'snippets\/'), "\\n", ',', 'g')$/;"	v
sq	gtags.vim	/^        let s:sq = "'"$/;"	v
stripMarkupFromLine	NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
tabpagevar	NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
tabular_loaded	Tabular.vim	/^let g:tabular_loaded = 1$/;"	v
tlist_app_name	taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
tlist_brief_help	taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
tlist_cur_file_idx	taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
tlist_debug	taglist.vim	/^let s:tlist_debug = 0$/;"	v
tlist_debug_file	taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
tlist_def_asm_settings	taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
tlist_def_aspperl_settings	taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
tlist_def_aspvbs_settings	taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
tlist_def_awk_settings	taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
tlist_def_beta_settings	taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
tlist_def_c_settings	taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
tlist_def_cobol_settings	taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
tlist_def_cpp_settings	taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;m:member;v:variable;d:macro;t:typedef;' .$/;"	v
tlist_def_cs_settings	taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
tlist_def_csh_settings	taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
tlist_def_eiffel_settings	taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
tlist_def_erlang_settings	taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
tlist_def_expect_settings	taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
tlist_def_fortran_settings	taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
tlist_def_html_settings	taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
tlist_def_java_settings	taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
tlist_def_javascript_settings	taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
tlist_def_lisp_settings	taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
tlist_def_lua_settings	taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
tlist_def_make_settings	taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
tlist_def_pascal_settings	taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
tlist_def_perl_settings	taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
tlist_def_php_settings	taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
tlist_def_python_settings	taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
tlist_def_rexx_settings	taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
tlist_def_ruby_settings	taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
tlist_def_scheme_settings	taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
tlist_def_sh_settings	taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
tlist_def_slang_settings	taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
tlist_def_sml_settings	taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
tlist_def_sql_settings	taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
tlist_def_tcl_settings	taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
tlist_def_vera_settings	taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
tlist_def_verilog_settings	taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
tlist_def_vim_settings	taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
tlist_def_yacc_settings	taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
tlist_def_zsh_settings	taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
tlist_file_count	taglist.vim	/^let s:tlist_file_count = 0$/;"	v
tlist_file_lnum_idx_cache	taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
tlist_file_name_idx_cache	taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
tlist_file_names	taglist.vim	/^let s:tlist_file_names=''$/;"	v
tlist_ftype_count	taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
tlist_menu_empty	taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
tlist_msg	taglist.vim	/^    let s:tlist_msg = ''$/;"	v
tlist_removed_flist	taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
tlist_sid	taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
tlist_win_maximized	taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
tlist_winsize_chgd	taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
toggle	NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
toggleZoom	NERD_tree.vim	/^function! s:toggleZoom()$/;"	f
tooBig	cppcomplete.vim	/^let s:tooBig=50$/;"	v
treeBufNames	NERD_tree.vim	/^    let treeBufNames = s:unique(treeBufNames)$/;"	v
treeExistsForBuf	NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
treeParts	NERD_tree.vim	/^                    let treeParts = treeParts . '+'$/;"	v
treeParts	NERD_tree.vim	/^                    let treeParts = treeParts . '~'$/;"	v
treeParts	NERD_tree.vim	/^                    let treeParts = treeParts . '▸ '$/;"	v
treeParts	NERD_tree.vim	/^                    let treeParts = treeParts . '▾ '$/;"	v
treeParts	NERD_tree.vim	/^                let treeParts = treeParts . '  '$/;"	v
treeParts	NERD_tree.vim	/^                let treeParts = treeParts . '-'$/;"	v
treeParts	NERD_tree.vim	/^                let treeParts = treeParts . '`'$/;"	v
treeParts	NERD_tree.vim	/^                let treeParts = treeParts . '|'$/;"	v
treeRoot	NERD_tree.vim	/^        let treeRoot = getbufvar(bufName, "NERDTreeRoot")$/;"	v
tree_markup_reg	NERD_tree.vim	/^    let s:tree_markup_reg = '^[ `|]*[\\-+~]'$/;"	v
tree_markup_reg	NERD_tree.vim	/^    let s:tree_markup_reg = '^\\([▾▸] \\| \\+[▾▸] \\| \\+\\)'$/;"	v
tree_up_dir_line	NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
tree_wid	NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
unique	NERD_tree.vim	/^function! s:unique(list)$/;"	f
upDir	NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
upDirCurrentRootClosed	NERD_tree.vim	/^function! s:upDirCurrentRootClosed()$/;"	f
upDirCurrentRootOpen	NERD_tree.vim	/^function! s:upDirCurrentRootOpen()$/;"	f
useBuffer	cppcomplete.vim	/^let s:useBuffer=1$/;"	v
useDJGPP	cppcomplete.vim	/^let s:useDJGPP=has("win32") || has("win16") || has("dos16") || has("dos32")$/;"	v
useInternalList	cppcomplete.vim	/^let s:useInternalList=0$/;"	v
useWildMenu	cppcomplete.vim	/^let s:useWildMenu=&wildmenu$/;"	v
useWinMenu	cppcomplete.vim	/^let s:useWinMenu=has("gui_running") && has("gui_win32")$/;"	v
xAndBack	cppcomplete.vim	/^function! s:xAndBack()$/;"	f
